{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","city","country","temperature","humidity","description","icon","src","error","API_KEY","App","_this","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","wrap","_context","prev","next","preventDefault","target","elements","City","Country","fetch","concat","sent","json","console","log","setState","current","temp_c","location","condition","text","stop","_x","state","undefined","components_Titles","components_Form","components_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e39c4305.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Titles extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='title-container__title'>Weather App</h1>\r\n                <h3 className='title-container__subtitle'>Find temperature,humidity</h3>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;\r\n","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type='text' name='City' placeholder='City'/>\r\n                <input type='text' name='Country' placeholder='Country'/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react'\r\n\r\nexport class Weather extends Component {\r\n    render() {\r\n        return (\r\n            <div className='weather__info'>\r\n                {this.props.city && this.props.country && <p className='weather__key'>Location:\r\n                <span className='weather__value'>\r\n                 {this.props.city},{this.props.country}\r\n                </span>\r\n                </p>}\r\n                <br/>\r\n                {this.props.temperature &&<p className='weather__key'>Temperature: \r\n                <span className='weather__value'>\r\n                 {this.props.temperature}\r\n                </span>\r\n                </p>}\r\n                <br/>\r\n                {this.props.humidity && <p className='weather__key'>Humidity:\r\n                <span className='weather__value'>\r\n                 {this.props.humidity}\r\n                </span></p>}\r\n                <br/>\r\n                {this.props.description && <p className='weather__key'>Description:\r\n                <span className='weather__value'>\r\n                 {this.props.description}\r\n                </span>\r\n                </p>}\r\n                {this.props.icon && <p className='weather__key'>\r\n                <span className='weather__value'>\r\n                <img src={this.props.error}></img>\r\n                </span></p>}\r\n                {this.props.error && <p className='weather__key'>Error:\r\n                <span className='weather__value'>\r\n                {this.props.error}\r\n                </span></p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather\r\n","import React,{Component} from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport { async } from 'q';\n\nconst API_KEY=\"67d216fb37d541a1b1c90254191206\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       temperature:undefined,\n       city:undefined,\n       country:undefined,\n       humidity:undefined,\n       description:undefined,\n       error:undefined,\n       icon:undefined\n    }\n  }\n  \n  \n  \n  getWeather=async(e) => {\n    e.preventDefault(); \n    const city=e.target.elements.City.value;\n    const country=e.target.elements.Country.value;\n    const api_call=await fetch(`https://api.apixu.com/v1/current.json?key=${API_KEY}&q=${city}`);\n    const data=await api_call.json();\n    \nif(city && country)\n   {console.log(data);\n     \n    this.setState({\n      temperature:data.current.temp_c,\n      city:data.location.name,\n      country:data.location.country,\n      humidity:data.current.humidity,\n      description:data.current.condition.text,\n      error: \"\",\n      icon:data.current.condition.icon\n    })\n  }else\n  {\n    this.setState({\n      error:'Enter City & Country'\n    })\n  }\n  }\n\n  render() {\n    return (\n      \n        <div>\n           <div className='wrapper'>\n             <div className='main'>\n               <div className='container'>\n                 <div className='row'>\n                   <div className='col-xs-12  col-lg-5 title-container'><Titles/></div>\n                   <div className='col-xs-12  col-lg-7 form-container'>\n                   <Form getWeather={this.getWeather}/>\n                    <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                    icon={this.state.icon}/>\n                   </div>\n                 </div>\n               </div>\n             </div>\n           </div>\n        </div>\n         \n      \n    );\n  }\n}\n\n          \n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}